from torch import nn
from torch.nn import functional as F    
from model.rwae import *


 
class UNetDoubleConv(nn.Module):
    def __init__(self, inc=1, outc=2, SOFTMAX=False):
        super().__init__()
        self.c1 =  nn.Conv3d(inc, outc, 3, stride=1, padding=1)
        self.c2 =  nn.Conv3d(outc, outc, 3, stride=1, padding=1)
        self.SOFTMAX = SOFTMAX
         
    def forward(self, x):
        y1 = self.c1(x)
        y1 = F.relu(F.instance_norm(y1))
        y = self.c2(y1)
        if self.SOFTMAX:
            y = F.softmax(y, dim=1)
        else:
            y = F.relu(F.instance_norm(y))
        return y


class UNet(nn.Module):
    def __init__(self, inc=1, outc=2, training=True):
        super().__init__()
        self.training = training

        self.encoders = nn.ModuleList([
            UNetDoubleConv(inc,32),
            UNetDoubleConv(32,32),
            UNetDoubleConv(32,32),
            UNetDoubleConv(32,32),
            UNetDoubleConv(32,32),
        ])
        
        self.decoders = nn.ModuleList([
            UNetDoubleConv(32,32),
            UNetDoubleConv(32,32),
            UNetDoubleConv(32,32),
            UNetDoubleConv(32,32,True),
        ])
        
    def forward(self, x):
        ens = []  # e0，e1, e2 ,e3, e4
        y = x
        for encoder in self.encoders:
            y = encoder(y)
            ens.append(y)
            y = F.max_pool3d(y, 2, 2)
        
        y = ens[-1]
        for i, decoder in enumerate(self.decoders):
            enx = ens[-2-i]
            dex = F.interpolate(y, size=enx.shape[2:],
                                mode='trilinear', align_corners=True)
            y = decoder(enx + dex)
        return y
    
    def loss(self, func, y, p):
        return func(y,p);


class WaveUNetConv(nn.Module):
    def __init__(self, inc=1, outc=2 ):
        super().__init__()
        self.c1 = nn.Conv3d(inc, outc, 3, stride=1, padding=1)
#         self.c2 = nn.Conv3d(outc, outc, 1, stride=1) 
        self.c2 = RWAE(outc, q=2, gama=0.1) 
         
    def forward(self, x):
        y1 = self.c1(x)
        y1 = F.relu(F.instance_norm(y1))
        y = self.c2(y1) 
        return y1
        
    
class WaveUNet(nn.Module):
    def __init__(self, inc=1, outc=2, training=True):
        super().__init__()
        self.training = training

        self.encoders = nn.ModuleList([
            WaveUNetConv(inc,32),
            WaveUNetConv(32,32),
            WaveUNetConv(32,32),
            WaveUNetConv(32,32),
            WaveUNetConv(32,64),
#             nn.Conv3d(inc, 32, 3, 1, 1),
#             nn.Conv3d(32, 32, 3, 1, 1),
#             nn.Conv3d(32, 32, 3, 1, 1),
#             nn.Conv3d(32, 32, 3, 1, 1), 
#             nn.Conv3d(32, 32, 3, 1, 1), 
        ])
        self.link = WaveUNetConv(64,64)
        
        self.decoders = nn.ModuleList([
            WaveUNetConv(64,32),
            WaveUNetConv(32,32),
            WaveUNetConv(32,32),
            WaveUNetConv(32,32),
            WaveUNetConv(32,32),
#             nn.Conv3d(32, 32, 3, 1, 1),
#             nn.Conv3d(32, 32, 3, 1, 1),
#             nn.Conv3d(32, 32, 3, 1, 1), 
#             nn.Conv3d(32, 32, 3, 1, 1), 
        ])
        
        self.deep_supervision = nn.ModuleList([
            nn.Sequential(nn.Conv3d(32, outc, 1, 1), nn.Softmax(dim=1)),
            nn.Sequential(nn.Conv3d(32, outc, 1, 1), nn.Softmax(dim=1)),
            nn.Sequential(nn.Conv3d(32, outc, 1, 1), nn.Softmax(dim=1)),
            nn.Sequential(nn.Conv3d(32, outc, 1, 1), nn.Softmax(dim=1)),
        ])
        
    def forward(self, x):
        ens = []  # e0，e1, e2 ,e3, e4
        y = x
        for encoder in self.encoders:
            y = encoder(y)
            ens.append(y)
            y = F.max_pool3d(y, 2, 2)
        
        y = self.link(y)
        des = []
        for i, decoder in enumerate(self.decoders):
            enx = ens[-1-i]
            dex = F.interpolate(y, size=enx.shape[2:],
                                mode='trilinear', align_corners=True)
            y = decoder(enx + dex)
            des.append(y)
        
        outs = []  # o1, o2, o3, o4 -> d4, d3, d2, d1 -> e1, e2, e3, e4
        for i, ds in enumerate(self.deep_supervision):
            y = F.interpolate(ds(des[i]), 
                              size=x.shape[2:],
                                mode='trilinear', align_corners=True) 
            outs.append(y)
        return outs[-1]


    def loss(self, func, y, p, λ):
        l = func(y, p[-1])
        for pi in p: 
            l = l+func(y, pi)
        return l
    

    
class MaskWaveUNet(nn.Module):
    def __init__(self, inc=1, outc=2, training=True):
        super().__init__()
        self.training = training
        self.waveunet = WaveUNet(inc, outc)
        self.waveunet2 = WaveUNet(inc, outc)
        self.wme1 = WaveMaskEncoder(2, False)
        self.wme2 = WaveMaskEncoder(8, True, 128)
        
    def forward(self, x): 
        self.wme1.make_en_de(torch.zeros_like(x)[0,0].to(x.device))
        x1 = self.wme1.encode(x)
        p1 = self.waveunet(x1)
        
        
        mask = self.wme1.decode(p1)
        self.wme2.make_en_de(mask[0,1])
        x2 = self.wme2.encode(x)
        
        p2 = self.waveunet2(x2) 
        p3 = self.wme2.decode(p2)
        
        return p1,p2,p3

    def loss(self, func, y, p1, p2):
        
        y1 = self.wme1.encode(y)
        y1 = F.max_pool3d(y1[:,1:], 3, 1, 1) 
        y1 = torch.cat((1-y1, y1), dim=1)
        
        y2 = self.wme2.encode(y)
        
        by2_ = y2-F.max_pool3d(-y2, 3, 1, 1) 
        bp2_ = p2-F.max_pool3d(-p2, 3, 1, 1) 
        
#         print(p1.shape,' : ',y1.shape)
#         print(p2.shape,' : ',y2.shape)
        
        return func(p1,y1)+func(p2,y2)+func(bp2_,by2_)
